# -*- coding: utf-8 -*-
"""Prediction Error Tracking Module.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UrcocZSGjLVByhPqqWR-_tS3rSEnRdSN
"""

#Base Model 에 대한 Prediction Error Tracking Method 적용 검증 모듈
#Base Model for Transfer learning.ipynb 에 depend/ 먼저 해당 파일을 실행해야 함.

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader

# A와 동일한 base model 구조 정의
class BaseModel(nn.Module):
    def __init__(self):
        super(BaseModel, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(64 * 8 * 8, 256)
        self.fc2 = nn.Linear(256, 100)

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        x = x.view(-1, 64 * 8 * 8)
        x = torch.relu(self.fc1(x))
        return self.fc2(x)

#학습 환경 설정
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model_aprime = BaseModel().to(device)

#base_model 파라미터 복사
model_aprime.load_state_dict(torch.load('base_model.pth'))

#오답 샘플 Dt_mis 불러오기
Dt_mis_inputs = torch.load("Dt_mis_inputs.pt")
Dt_mis_labels = torch.load("Dt_mis_labels.pt")

#오답 샘플 데이터셋 구성
Dt_mis_dataset = TensorDataset(Dt_mis_inputs, Dt_mis_labels)
Dt_mis_loader = DataLoader(Dt_mis_dataset, batch_size=64, shuffle=True)

# A 가 틀린 예측을 한 데이터에 대해서만 논문과 동일한 방식으로 과적합 시켜 A' 를 train
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model_aprime.parameters(), lr=0.001)

num_epochs = 10
model_aprime.train()
for epoch in range(num_epochs):
    running_loss = 0.0
    for inputs, labels in Dt_mis_loader:
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model_aprime(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
    print(f"[A' Epoch {epoch+1}] Loss: {running_loss:.3f}")

# A' 모델 저장
torch.save(model_aprime.state_dict(), 'a_prime_model.pth')
print(" 'A′ 모델 저장 완료: a_prime_model.pth")